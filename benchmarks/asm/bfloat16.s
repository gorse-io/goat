//go:build !noasm && arm64
// Code generated by GoAT. DO NOT EDIT.
// versions:
// 	clang   18.1.3 (1ubuntu1)
// 	objdump 2.42
// flags: -march=armv8.2-a+bf16 -O3
// source: bf16/asm_bf16/src/bfloat16.c

TEXT ·convert_float32_to_bf16(SB), $0-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD n+16(FP), R2
	WORD $0xf100045f  // cmp	x2, #1
	BLT  LBB0_9
	WORD $0xa9bf7bfd  // stp	x29, x30, [sp, #-16]!
	WORD $0xf1000c5f  // cmp	x2, #3
	WORD $0x910003fd  // mov	x29, sp
	BHI  LBB0_3
	WORD $0xaa1f03e8  // mov	x8, xzr
	B    LBB0_6

LBB0_3:
	WORD $0x927ef048 // and	x8, x2, #0x7ffffffffffffffc
	WORD $0x91002009 // add	x9, x0, #8
	WORD $0x9100102a // add	x10, x1, #4
	WORD $0xaa0803eb // mov	x11, x8

LBB0_4:
	WORD $0x6d7f8520 // ldp	d0, d1, [x9, #-8]
	WORD $0xf100116b // subs	x11, x11, #4
	WORD $0x91004129 // add	x9, x9, #16
	WORD $0x0ea16800 // bfcvtn	v0.4h, v0.4s
	WORD $0x0ea16821 // bfcvtn	v1.4h, v1.4s
	WORD $0x0e813800 // zip1	v0.2s, v0.2s, v1.2s
	WORD $0xfc1fc140 // stur	d0, [x10, #-4]
	WORD $0x9100214a // add	x10, x10, #8
	BNE  LBB0_4
	WORD $0xeb02011f // cmp	x8, x2
	BEQ  LBB0_8

LBB0_6:
	WORD $0x8b080429 // add	x9, x1, x8, lsl #1
	WORD $0x8b08080a // add	x10, x0, x8, lsl #2
	WORD $0xcb080048 // sub	x8, x2, x8

LBB0_7:
	WORD $0xbc404540 // ldr	s0, [x10], #4
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x1e634000 // bfcvt	h0, s0
	WORD $0x7c002520 // str	h0, [x9], #2
	BNE  LBB0_7

LBB0_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16

LBB0_9:
	RET

TEXT ·convert_bf16_to_float32(SB), $0-24
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD n+16(FP), R2
	WORD $0xf100045f  // cmp	x2, #1
	BLT  LBB1_9
	WORD $0xa9bf7bfd  // stp	x29, x30, [sp, #-16]!
	WORD $0xf1003c5f  // cmp	x2, #15
	WORD $0x910003fd  // mov	x29, sp
	BHI  LBB1_3
	WORD $0xaa1f03e8  // mov	x8, xzr
	B    LBB1_6

LBB1_3:
	WORD $0x927ce848 // and	x8, x2, #0x7ffffffffffffff0
	WORD $0x91004009 // add	x9, x0, #16
	WORD $0x9100802a // add	x10, x1, #32
	WORD $0xaa0803eb // mov	x11, x8

LBB1_4:
	WORD $0xad7f8520 // ldp	q0, q1, [x9, #-16]
	WORD $0xf100416b // subs	x11, x11, #16
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0x6e004002 // ext	v2.16b, v0.16b, v0.16b, #8
	WORD $0x6e014023 // ext	v3.16b, v1.16b, v1.16b, #8
	WORD $0x2e613800 // shll	v0.4s, v0.4h, #16
	WORD $0x2e613821 // shll	v1.4s, v1.4h, #16
	WORD $0x2e613842 // shll	v2.4s, v2.4h, #16
	WORD $0x2e613863 // shll	v3.4s, v3.4h, #16
	WORD $0xad3f0940 // stp	q0, q2, [x10, #-32]
	WORD $0xac820d41 // stp	q1, q3, [x10], #64
	BNE  LBB1_4
	WORD $0xeb02011f // cmp	x8, x2
	BEQ  LBB1_8

LBB1_6:
	WORD $0x8b080829 // add	x9, x1, x8, lsl #2
	WORD $0x8b08040a // add	x10, x0, x8, lsl #1
	WORD $0xcb080048 // sub	x8, x2, x8

LBB1_7:
	WORD $0x7c402540 // ldr	h0, [x10], #2
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x1e26000b // fmov	w11, s0
	WORD $0x53103d6b // lsl	w11, w11, #16
	WORD $0x1e270160 // fmov	s0, w11
	WORD $0xbc004520 // str	s0, [x9], #4
	BNE  LBB1_7

LBB1_8:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16

LBB1_9:
	RET

TEXT ·add_bf16(SB), $0-32
	MOVD a+0(FP), R0
	MOVD b+8(FP), R1
	MOVD result+16(FP), R2
	MOVD n+24(FP), R3
	WORD $0xf100047f       // cmp	x3, #1
	BLT  LBB2_6
	WORD $0xa9bf7bfd       // stp	x29, x30, [sp, #-16]!
	WORD $0xf1003c7f       // cmp	x3, #15
	WORD $0x910003fd       // mov	x29, sp
	BHI  LBB2_7
	WORD $0xaa1f03e8       // mov	x8, xzr

LBB2_3:
	WORD $0xd37ff90b // lsl	x11, x8, #1
	WORD $0xcb080068 // sub	x8, x3, x8
	WORD $0x8b0b0049 // add	x9, x2, x11
	WORD $0x8b0b002a // add	x10, x1, x11
	WORD $0x8b0b000b // add	x11, x0, x11

LBB2_4:
	WORD $0x7c402560 // ldr	h0, [x11], #2
	WORD $0xf1000508 // subs	x8, x8, #1
	WORD $0x7c402541 // ldr	h1, [x10], #2
	WORD $0x1e26000d // fmov	w13, s0
	WORD $0x1e26002c // fmov	w12, s1
	WORD $0x53103dad // lsl	w13, w13, #16
	WORD $0x53103d8c // lsl	w12, w12, #16
	WORD $0x1e2701a1 // fmov	s1, w13
	WORD $0x1e270180 // fmov	s0, w12
	WORD $0x1e202820 // fadd	s0, s1, s0
	WORD $0x1e634000 // bfcvt	h0, s0
	WORD $0x7c002520 // str	h0, [x9], #2
	BNE  LBB2_4

LBB2_5:
	WORD $0xa8c17bfd // ldp	x29, x30, [sp], #16

LBB2_6:
	RET

LBB2_7:
	WORD $0xcb000048 // sub	x8, x2, x0
	WORD $0xf100811f // cmp	x8, #32
	WORD $0xaa1f03e8 // mov	x8, xzr
	BLO  LBB2_3
	WORD $0xcb010049 // sub	x9, x2, x1
	WORD $0xf100813f // cmp	x9, #32
	BLO  LBB2_3
	WORD $0x927ce868 // and	x8, x3, #0x7ffffffffffffff0
	WORD $0x91004009 // add	x9, x0, #16
	WORD $0x9100402a // add	x10, x1, #16
	WORD $0x9100404b // add	x11, x2, #16
	WORD $0xaa0803ec // mov	x12, x8

LBB2_10:
	WORD $0xad7f8d40 // ldp	q0, q3, [x10, #-16]
	WORD $0xf100418c // subs	x12, x12, #16
	WORD $0xad7f8921 // ldp	q1, q2, [x9, #-16]
	WORD $0x91008129 // add	x9, x9, #32
	WORD $0x9100814a // add	x10, x10, #32
	WORD $0x2e613804 // shll	v4.4s, v0.4h, #16
	WORD $0x2e613866 // shll	v6.4s, v3.4h, #16
	WORD $0x6e613800 // shll2	v0.4s, v0.8h, #16
	WORD $0x2e613825 // shll	v5.4s, v1.4h, #16
	WORD $0x2e613847 // shll	v7.4s, v2.4h, #16
	WORD $0x6e613821 // shll2	v1.4s, v1.8h, #16
	WORD $0x6e613863 // shll2	v3.4s, v3.8h, #16
	WORD $0x6e613842 // shll2	v2.4s, v2.8h, #16
	WORD $0x4e24d4a4 // fadd	v4.4s, v5.4s, v4.4s
	WORD $0x4e26d4e5 // fadd	v5.4s, v7.4s, v6.4s
	WORD $0x4e20d420 // fadd	v0.4s, v1.4s, v0.4s
	WORD $0x4e23d442 // fadd	v2.4s, v2.4s, v3.4s
	WORD $0x0ea16881 // bfcvtn	v1.4h, v4.4s
	WORD $0x0ea168a3 // bfcvtn	v3.4h, v5.4s
	WORD $0x4ea16801 // bfcvtn2	v1.8h, v0.4s
	WORD $0x4ea16843 // bfcvtn2	v3.8h, v2.4s
	WORD $0xad3f8d61 // stp	q1, q3, [x11, #-16]
	WORD $0x9100816b // add	x11, x11, #32
	BNE  LBB2_10
	WORD $0xeb03011f // cmp	x8, x3
	BNE  LBB2_3
	B    LBB2_5
